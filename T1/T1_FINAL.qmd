---
title: "T1: Vehicle Availability"
format: 
  html:
    theme: minty
    toc: true
    toc-location: left
editor: visual
---

## Defining file paths

Note: As long as everyone is using the same directory structure within the project folder, there would be no need to modify these before running the code.

```{r, warning = FALSE, message = FALSE}
library(here)

# File path for where this T1.qmd file is located
T1_folder <- file.path(here("T1"))

# File path for where the inputs folder is located
inputs_folder <- file.path(here("model", "inputs"))

# File path for where the SQL databases are located
sql_db_folder <- file.path(here("T1"))
```

## Load libraries

This analysis uses the following packages:

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(sf)
library(DBI)
library(here)
library(leaflet)
library(maptiles)
library(tidyterra)
library(knitr)
library(tigris)

sf::sf_use_s2(FALSE)
```

```{r}
MA_pop <- file.path(inputs_folder, "zonal",
               "ma_population_run97-176_2019_v20240109.csv") |>
  read_csv(show_col_types = FALSE) |>
  mutate(block_id = as.character(block_id))
```

### Employment files

```{r}
MA_emp <- file.path(inputs_folder, "zonal",
               "ma_employment_run97-176_2019_v20240109.csv") |>
  read_csv(show_col_types = FALSE) |>
  mutate(block_id = as.character(block_id))

```

## Edit model inputs

### Change population

```{r}


# Summarize the number of persons in each block ID
summarized_block_pop <- MA_pop |>
  filter(block_id %in% target_block_ids) |>
  group_by(block_id) |>
  summarize(total_people = n(), mean_inc = mean(wage_inc))

  
```

```{r}
gen_pop <- function(my_block_id, addit_ppl, new_hh_name) {
  tibble(
    hid = paste0(new_hh_name, seq(1, addit_ppl, by=1)),
    block_id = my_block_id,
    hh_inc = rpois(n = addit_ppl, lambda = 28000),
    persons_seed = runif(n = addit_ppl),
    age = round(rnorm(n = addit_ppl, mean = 45, sd = 15)),
    workers = 1,
    is_worker = 1,
    person_num = 1,
    is_child = FALSE
  ) |>
    mutate(
      persons = case_when(
        persons_seed < 0.5 ~ 2,
        persons_seed < 0.83 ~ 1,
        TRUE ~ 3
      ),
      age = ifelse(age < 18, 18, age),
      wage_inc = hh_inc
    ) |>
    select(-persons_seed)
}

# Example usage
new_pop_11 <- gen_pop("250173531021004",300, "mitfields") #mitfields
new_pop_12 <- gen_pop("250173531022011",400, "mitcore") #mitcore
new_pop_13 <- gen_pop("250173537003005",300, "hvdyard") #hvdyard
new_pop_14 <- gen_pop("250173536005005",300, "hvdsci") #hvdsci
new_pop_15 <- gen_pop("250250001001001",400, "hvdfields") #hvdfields


```

```{r}
add_second_person <- function(new_pop_1) {
  new_pop_2 <- new_pop_1 |>
    filter(persons > 1) |>
    select(hid, block_id, hh_inc, persons, workers) |>
    mutate(
      person_num = 2,
      is_worker = 0,
      wage_inc = 0,
      
      child_seed = runif(n = n()),
      is_child = child_seed < 0.5
    ) |>
    select(-child_seed)

  # Separate children and adults
  new_pop_2_kids <- new_pop_2 |>
    filter(is_child)
  
  new_pop_2_kids <- new_pop_2_kids |>
    mutate(age = round(rnorm(n = nrow(new_pop_2_kids), mean=10, sd=5))) |>
    mutate(age = case_when(age < 0 ~ 0, age > 17 ~ 17, TRUE ~ age))

  new_pop_2_adult <- new_pop_2 |>
    filter(!is_child)
  
  new_pop_2_adult <- new_pop_2_adult |>
    mutate(age = round(rnorm(n = nrow(new_pop_2_adult), mean=50, sd=10))) |>
    mutate(age = ifelse(age < 18, 18, age))

  # Combine both groups
  new_pop_2 <- bind_rows(new_pop_2_adult, new_pop_2_kids)

  return(new_pop_2)
}

# Example usage
new_pop_21 <- add_second_person(new_pop_11)
new_pop_22 <- add_second_person(new_pop_12)
new_pop_23 <- add_second_person(new_pop_13)
new_pop_24 <- add_second_person(new_pop_14)
new_pop_25 <- add_second_person(new_pop_15)
```

```{r}
add_third_person <- function(new_pop_1) {
  new_pop_3 <- new_pop_1 |>
    filter(persons > 2) |>
    select(hid, block_id, hh_inc, persons, workers) |>
    mutate(
      person_num = 3,
      is_worker = 0,
      wage_inc = 0,
      child_seed = runif(n = n()),
      is_child = child_seed < 0.5
    ) |>
    select(-child_seed)

  new_pop_3_kids <- new_pop_3 |>
    filter(is_child)
  
  new_pop_3_kids <- new_pop_3_kids |>
    mutate(age = round(rnorm(n = nrow(new_pop_3_kids), mean=10, sd=5))) |>
    mutate(age = case_when(age < 0 ~ 0, age > 17 ~ 17, TRUE ~ age))

  new_pop_3_adult <- new_pop_3 |>
    filter(!is_child)
  
  new_pop_3_adult <- new_pop_3_adult |>
    mutate(age = round(rnorm(n = nrow(new_pop_3_adult), mean=50, sd=10))) |>
    mutate(age = ifelse(age < 18, 18, age))

  # Combine both groups
  new_pop_3 <- bind_rows(new_pop_3_adult, new_pop_3_kids)

  return(new_pop_3)
}

# Example usage
new_pop_31 <- add_third_person(new_pop_11)
new_pop_32 <- add_third_person(new_pop_12)
new_pop_33 <- add_third_person(new_pop_13)
new_pop_34 <- add_third_person(new_pop_14)
new_pop_35 <- add_third_person(new_pop_15)
```

```{r}

combine_population <- function(new_pop_1, new_pop_2, new_pop_3) {
  new_pop <- bind_rows(new_pop_1, new_pop_2, new_pop_3) |>
    group_by(hid) |>
    mutate(children = sum(is_child)) |>
    select(-is_child) |>
    arrange(hid, person_num) |>
    ungroup()

  return(new_pop)
}

# Example usage
new_pop_mitfields <- combine_population(new_pop_11, new_pop_21, new_pop_31)
new_pop_mitcore <- combine_population(new_pop_12, new_pop_22, new_pop_32)
new_pop_hvdyard <- combine_population(new_pop_13, new_pop_23, new_pop_33)
new_pop_hvdsci <- combine_population(new_pop_14, new_pop_24, new_pop_34)
new_pop_hvdfields <- combine_population(new_pop_15, new_pop_25, new_pop_35)

```

```{r}

# List of new population datasets
new_pops <- list(new_pop_mitfields, new_pop_mitcore, new_pop_hvdyard, new_pop_hvdsci, new_pop_hvdfields)

# Combine all populations
MA_pop_updated <- bind_rows(MA_pop, new_pops)  
MA_pop_updated

# Calculate the total households for each block ID
households_per_block <- MA_pop_updated |> 
  filter(block_id %in% target_block_ids) |> 
  group_by(block_id) |> 
  summarize(total_households = length(unique(hid)))

# Display the result
households_per_block

# Summarize the number of persons in each block ID

summarized_block_pop <- MA_pop_updated |> 
  filter(block_id %in% target_block_ids) |> 
  group_by(block_id) |> 
  summarize(total_people = n())

# Display the summarized data

summarized_block_pop


```

```{r}
# Write to CSV
write_csv(MA_pop_updated, file.path(inputs_folder, "zonal", "ma_pop_nounis.csv"))

nrow(MA_pop)
nrow(MA_pop_updated)
```

### Change employment

```{r}


MA_emp |>
  filter(block_id %in% target_block_ids) |>
  t() |>
  kable()
```

```{r}

hh_per_block <- MA_pop_updated |>
  filter(block_id %in% target_block_ids) |>
  group_by(block_id) |>
  summarize(total_households = length(unique(hid)))

hh_per_block

# Create the new_emp tibble
new_emp <- tibble(block_id = target_block_ids,
                  `1_constr` = 0,
                  `2_eduhlth` = 0,
                  `3_finance` = 0,
                  `4_public` = 0,
                  `5_info` = 0,
                  `6_ret_leis` = 0,
                  `7_manu` = 0,
                  `8_other` = 0,
                  `9_profbus` = 0,
                  `10_ttu` = 0,
                  total_jobs = 0,
                  total_households = 0)

# Merge the data to get total_households per block_id
new_emp <- left_join(new_emp, hh_per_block, by = "block_id") |>
  select(block_id, `1_constr`, `2_eduhlth`, `3_finance`, `4_public`, `5_info`, `6_ret_leis`, `7_manu`, `8_other`, `9_profbus`, `10_ttu`, total_jobs, total_households = total_households.y)



MA_emp_updated <- MA_emp |>
  filter(!block_id %in% target_block_ids) |>
  bind_rows(new_emp)

MA_emp_updated |>
  filter(block_id %in% target_block_ids) |>
  t() |>
  kable()

write_csv(MA_emp_updated, file.path(inputs_folder, "zonal", "ma_emp_nounis.csv"))


```

## Scenario results

```{r, message = FALSE, warning = FALSE, echo = FALSE, results = "hide"}

# Download census block data for MA
ma_blocks <- blocks(state = "MA", year = 2010, class = "sf")
```

```{r}
# Connect to SQLite db for base scenario
base_db <- dbConnect(drv=RSQLite::SQLite(), 
                     dbname=file.path(sql_db_folder, "tdm23_base.db"))


```

```{r}
dbListTables(base_db)
```

```{r}

# Extract vehicle availability data from the base scenario
my_query <- paste0("SELECT * FROM veh")

target_vehs_base <- dbGetQuery(base_db, my_query)

```

```{r}
dbDisconnect(base_db)

alt_db <- dbConnect(drv=RSQLite::SQLite(), 
                     dbname=file.path(sql_db_folder, "tdm23_alt_FINAL.db"))

```

```{r, warning=FALSE, message=FALSE}
# Query vehicle availability data for the alternative scenario
my_query_alt <- paste0("SELECT * FROM veh")

target_vehs_alt <- dbGetQuery(alt_db, my_query_alt)

# Close connection to the alternative scenario database
dbDisconnect(alt_db)

# Display sample data
head(target_vehs_alt) |> kable()
```

```{r, message = FALSE, warning = FALSE}
# Clean up base and alternative scenario data
target_vehs_base <- target_vehs_base |> 
  rename(veh_suff_base = veh_suff) |> 
  select(-num_vehs)

target_vehs_alt <- target_vehs_alt |> 
  rename(veh_suff_alt = veh_suff) |> 
  select(-num_vehs)

# Merge datasets, ensuring missing values are handled 
target_vehs_dif <- full_join(target_vehs_base, target_vehs_alt) |>
  mutate(veh_suff_base = ifelse(is.na(veh_suff_base), "new", veh_suff_base))

# Categorize vehicle ownership changes
target_vehs_changed_hh <- target_vehs_dif |>  
  mutate(change = case_when(
    veh_suff_base == "new" & veh_suff_alt == "zv" ~ "New zv",
    veh_suff_base == "new" & veh_suff_alt == "iv" ~ "New iv",
    veh_suff_base == "new" & veh_suff_alt == "sv" ~ "New sv",
    veh_suff_base == "zv" & veh_suff_alt == "iv" ~ "Gained vehicle",
    veh_suff_base == "zv" & veh_suff_alt == "sv" ~ "Gained vehicle",
    veh_suff_base == "sv" & veh_suff_alt == "zv" ~ "Lost vehicle",
    veh_suff_base == "sv" & veh_suff_alt == "iv" ~ "Lost vehicle",
    veh_suff_base == "iv" & veh_suff_alt == "zv" ~ "Lost vehicle",
    veh_suff_base == "iv" & veh_suff_alt == "sv" ~ "Gained vehicle",
    TRUE ~ "No change"
  ))

# Summarize changes at the block level
target_vehs_changed_blocks <- target_vehs_changed_hh |> 
  mutate(block_id = as.character(block_id)) |> 
  group_by(block_id) |>  
  summarise(
    n_hhs = n(),  # Count number of households per block
    n_new_zv = sum(change == "New zv", na.rm = TRUE),
    n_new_iv = sum(change == "New iv", na.rm = TRUE),
    n_new_sv = sum(change == "New sv", na.rm = TRUE),
    n_gained_veh = sum(change == "Gained vehicle", na.rm = TRUE),
    n_lost_veh = sum(change == "Lost vehicle", na.rm = TRUE)
  ) |>
  rename(GEOID10 = block_id) |>
  filter(n_new_zv + n_new_iv + n_new_sv + n_gained_veh + n_lost_veh > 0)

```

```{r, warning=FALSE, message=FALSE}
# Load spatial data for blocks with changes
dif_blocks <- ma_blocks |>
  select(GEOID10) |>
  right_join(target_vehs_changed_blocks) |>
  st_transform("WGS84")

# Create labels for the map
veh_labels <- paste0(
  dif_blocks$n_hhs, " total households<br/>",
  dif_blocks$n_new_zv, " new car-free households<br/>",
  dif_blocks$n_new_iv, " new car-lite households<br/>",
  dif_blocks$n_new_sv, " new full-car households<br/>",
  dif_blocks$n_lost_veh, " households lost a vehicle<br/>",
  dif_blocks$n_gained_veh, " households gained a vehicle"
) |> lapply(htmltools::HTML)

# Generate interactive map
leaflet(dif_blocks) |>  
  addProviderTiles(provider = "CartoDB.Positron") |>  
  addPolygons(
    weight = 2,
    color = "forestgreen",
    fillColor = "forestgreen",
    fillOpacity = 0.1,
    highlightOptions = highlightOptions(weight = 3, fillOpacity = 0.5),
    label = veh_labels
  )

```

```{r, warning=FALSE, message=FALSE}

target_blocks <- dif_blocks |>
  filter(GEOID10 %in% target_block_ids)

# All blocks with changes
st_write(dif_blocks, file.path(T1_folder, 
                               "blocks",
                               "dif_blocks.shp"), append = FALSE)

# Just the targeted blocks
st_write(dif_blocks, file.path(T1_folder, 
                               "blocks",
                               "target_blocks.shp"), append = FALSE)
```
